name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # -------------------------
  # 1. Build Job
  # -------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Configure Maven for Jfrog
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>jfrog-artifactory</id>
                <username>${{secrets.JFROG_USERNAME}}</username>
                <password>${{secrets.JFROG_PASSWORD}}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy to Jfrog
        run: mvn clean deploy -DskipTests
        env: 
          MAVEN_USERNAME: ${{secrets.JFROG_USERNAME}}
          MAVEN_PASSWORD: ${{secrets.FROG_PASSWORD}}

  # -------------------------
  # 2. Test Job
  # -------------------------
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Run tests
        run: mvn test

  # -------------------------
  # 3. Sonar Quality Analysis
  # -------------------------
  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=vardhan556_aks-java-demo \
            -Dsonar.organization=vardhan556 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # -------------------------
  # 4. Docker Build & Push
  # -------------------------  # -------------------------
  # 4. Docker Build & Push
  # -------------------------
  docker:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          sudo mv jfrog /usr/local/bin/

      - name: Configure JFrog CLI
        run: |
          jfrog rt config --url=https://trialezxell.jfrog.io/artifactory \
          --user=${{secrets.JFROG_USERNAME}} \
          --password=${{secrets.JFROG_PASSWORD}} \
          --interactive=false

      - name: Download JAR from Jfrog
        run: |
          jfrog rt dl "maven-local/com/example/aks-java-demo/1.0.0/aks-java-demo-1.0.0.jar" target/ --flat=true --server-id=my-server
          mv target/aks-java-demo-1.0.0.jar target/app.jar

      - name: Debug downloaded files (always run)
        if: always()
        run: ls -R target

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/aks-java-demo:latest
            ${{ secrets.DOCKER_USERNAME }}/aks-java-demo:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/aks-java-demo:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/aks-java-demo:buildcache,mode=max
