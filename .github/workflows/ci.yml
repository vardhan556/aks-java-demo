name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # -------------------------
  # 1. Build Job
  # -------------------------
  build:
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{steps.version.outputs.project_version}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Configure Maven for Jfrog
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>jfrog-artifactory</id>
                <username>${{secrets.JFROG_USERNAME}}</username>
                <password>${{secrets.JFROG_PASSWORD}}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Set dynamic snapshot version
        id: version
        run: |
          VERSION=1.0.0-SNAPSHOT-${{github.run_number}}-${GITHUB_SHA::7}
          echo "project_version=$VERSION" >> $GITHUB_OUTPUT
          mvn versions:set -DnewVersion=$VERSION
          mvn versions:commit

      - name: Debug build version
        run: |
          echo "Step output project_version: ${{steps.version.outputs.project_version}}"
          echo "Env PROJECT_VERSION: $PROJECT_VERSION"

      - name: Build and deploy to Jfrog
        run: mvn clean deploy -DskipTests
        env: 
          MAVEN_USERNAME: ${{secrets.JFROG_USERNAME}}
          MAVEN_PASSWORD: ${{secrets.JFROG_PASSWORD}}

  # -------------------------
  # 2. Test Job
  # -------------------------
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Run tests
        run: mvn test

  # -------------------------
  # 3. Sonar Quality Analysis
  # -------------------------
  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=vardhan556_aks-java-demo \
            -Dsonar.organization=vardhan556 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # -------------------------
  # 4. Docker Build & Push
  # -------------------------  # -------------------------
  # 4. Docker Build & Push
  # -------------------------
  docker:
    runs-on: ubuntu-latest
    needs: 
      - build
      - sonar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      - name: Configure JFrog CLI
        run: |
          jfrog config add my-server \
            --artifactory-url=https://trialezxell.jfrog.io/artifactory \
            --user=${{secrets.JFROG_USERNAME}} \
            --password=${{secrets.JFROG_PASSWORD}} \
            --interactive=false

      - name: Debug version
        run: |
          echo "Using project version : ${{needs.build.outputs.project_version}}"

      - name: Download JAR from Jfrog
        run: |
          jfrog rt download "maven-local/com/example/aks-java-demo/${{needs.build.outputs.project_version}}/aks-java-demo-${{needs.build.outputs.project_version}}.jar" target/ --flat=true --server-id=my-server
          mv target/aks-java-demo-${{needs.build.outputs.project_version}}.jar target/app.jar

      - name: Debug downloaded files (always run)
        if: always()
        run: ls -R target || echo "No target directory found"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{secrets.DOCKER_USERNAME}}/aks-java-demo:ci-${{github.run_number}}
            ${{ secrets.DOCKER_USERNAME }}/aks-java-demo:latest
            ${{ secrets.DOCKER_USERNAME }}/aks-java-demo:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/aks-java-demo:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/aks-java-demo:buildcache,mode=max
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: java_maven_project_demo
          cluster-name: myAKSCluster
      
      # - name: Install kubectl this is not needed because azure/aks-set-content@v3 already ensures kubectl is available
      #   run: az aks install-cli

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/aks-java-demo \
            aks-java-demo=${{secrets.DOCKER_USERNAME}}/aks-java-demo:ci-${{github.run_number}} \
            -n aks-java-demo
          kubectl rollout status deployment/aks-java-demo -n aks-java-demo
